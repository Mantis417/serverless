AWSTemplateFormatVersion: 2010-09-09
Description: Serverless contactform webapplication

Parameters:
  FrMail:
    Type: String
    Description: "Email sender."

  TillMail:
    Type: String
    Description: "Email recipient."
  
  GitHubRepository:
    Type: String
    Description: "GitHub repository."

Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Contacts
      AttributeDefinitions:
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: timestamp
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  #IAM Role for Lambda to access SES
  LambdaSESIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaSESIAMRole
      Description: Role for Lambda to access SES with basic execution and full DynamoDB access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFullDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: "*"
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:your-region:your-account-id:log-group:/aws/lambda/*
        - PolicyName: AmazonSESFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: "*"

  #IAM role for Lambda to access DynamoDB
  LambdaDynamoIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoIAMRole
      Description: Role for Lambda to access DynamoDB with basic execution and full DynamoDB access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFullDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: !GetAtt DynamoDBTable.Arn
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:your-region:your-account-id:log-group:/aws/lambda/*

  #Contact form function
  ContactFormFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaDynamoIAMRole
      - DynamoDBTable
    Properties:
      FunctionName: ContactFormFunction
      Runtime: python3.12
      Role: !GetAtt LambdaDynamoIAMRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime

          def lambda_handler(event, context):
            db = boto3.resource('dynamodb')
            table = db.Table('Contacts')

            dateTime = (datetime.now()).strftime("%Y-%m-%d %H:%M:%S")

            try:
                payload = json.loads(event['body'])

                table.put_item(
                  Item={
                    'timestamp': dateTime,
                    'name': payload['name'],
                    'email': payload['email'],
                    'message': payload['msg']
                  }
                )

                return {
                    'statusCode': 200,
                    'body': json.dumps('Successfully saved contact info!'),
                    'headers': {
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Credentials": True,
                    }
                }

            except Exception as e:
                return {
                    'statusCode': 400,
                    'body': json.dumps(f'Error saving contact info: {str(e)}'),
                    'headers': {
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Credentials": True,
                    }
                }
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable

  #API Gateway to integrate with function
  APIGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "ContactsAPI"
      Description: "API Gateway for ContactFormFunction Lambda integration"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGatewayRest.RootResourceId
      PathPart: "ContactFormFunction"
      RestApiId: !Ref APIGatewayRest

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ContactFormFunction
      - ApiGatewayResource
    Properties:
      RestApiId: !Ref APIGatewayRest
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFormFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'

  ApiGatewayMethodOpt:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref APIGatewayRest
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  #Lambda Permission to allow API Gateway to invoke the Function
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ContactFormFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRest}/*/*/ContactFormFunction

  #API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref APIGatewayRest
      StageName: default

  #SendContactEmail Function
  SendContactEmail:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaSESIAMRole
      - DynamoDBTable
    Properties:
      FunctionName: SendContactInfoEmail
      Runtime: python3.12
      Role: !GetAtt LambdaSESIAMRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              # Scan the DynamoDB table
              result = table.scan()
              items = result['Items']

              items.sort(key=lambda x: datetime.strptime(x['timestamp'], '%Y-%m-%d %H:%M:%S'), reverse=True)

              ses = boto3.client('ses')

              # Build the HTML table body for the email
            body = """
            <html>
            <head>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        background-color: #f9f9f9;
                        color: #333;
                        margin: 0;
                        padding: 20px;
                    }
                    h3 {
                        text-align: center;
                        color: #4a90e2;
                        font-family: 'Roboto', sans-serif;
                    }
                    table {
                        width: 100%;
                        border-collapse: collapse;
                        margin: 20px 0;
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                        background: linear-gradient(135deg, #ff7e5f, #feb47b);
                        color: #fff;
                        border-radius: 10px;
                        overflow: hidden;
                    }
                    th, td {
                        text-align: left;
                        padding: 12px;
                    }
                    th {
                        background: #333;
                        color: #fff;
                        font-size: 14px;
                        font-weight: bold;
                    }
                    tr:nth-child(even) {
                        background: rgba(255, 255, 255, 0.1);
                    }
                    tr:hover {
                        background: rgba(255, 255, 255, 0.2);
                        transition: background 0.3s;
                    }
                    td {
                        font-size: 13px;
                    }
                    @media (max-width: 600px) {
                        table {
                            font-size: 12px;
                        }
                        th, td {
                            padding: 8px;
                        }
                    }
                </style>
            </head>
            <body>
                <h3>Contact Information</h3>
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Message</th>
                        <th>Timestamp</th>
                    </tr>
            """

              ses.send_email(
                  Source=os.environ['FROM_EMAIL'],
                  Destination={
                      'ToAddresses': [
                          os.environ['TO_EMAIL']
                      ]
                  },
                  Message={
                      'Subject': {
                          'Data': 'Contact Info Notification',
                          'Charset': 'UTF-8'
                      },
                      'Body': {
                          'Html': {
                              'Data': body,
                              'Charset': 'UTF-8'
                          }
                      }
                  }
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Successfully sent email from Lambda using Amazon SES')
              }

      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          FROM_EMAIL: !Ref FrMail
          TO_EMAIL: !Ref TillMail

  #Enable SendContactEmail to be triggered by DynamoDB stream
  EmailFunctionDynamoDBTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: SendContactEmail
    Properties:
      BatchSize: 100
      EventSourceArn: !GetAtt DynamoDBTable.StreamArn
      FunctionName: !Ref SendContactEmail
      StartingPosition: LATEST
      Enabled: true
      BisectBatchOnFunctionError: false 
      TumblingWindowInSeconds: 0

  #S3 Bucket with static website hosting
  ContactS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'contact-form-bucket-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false  
        RestrictPublicBuckets: false
  
  #ContactS3Bucket Policy
  ContactS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContactS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicAccessGetObject
            Effect: Allow
            Principal: "*"  
            Action: "s3:GetObject"
            Resource: 
              - !Sub "${ContactS3Bucket.Arn}/*"  
  
  S3UploadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "S3UploadRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetObject"
                Resource: 
                  - !Sub "${ContactS3Bucket.Arn}/*"

  # Lambda function to handle file upload with CloudFormation response
  S3LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - S3UploadRole
      - ContactS3Bucket
      - APIGatewayRest
    Properties:
      FunctionName: UploadHtmlFunction
      Handler: index.lambda_handler
      Role: !GetAtt S3UploadRole.Arn
      Runtime: python3.13
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import urllib.request

          s3_client = boto3.client('s3')

          # Function to send a response to CloudFormation
          def send_response(event, context, status, response_data):
              response_url = event['ResponseURL']
              response_body = json.dumps({
                  'Status': status,
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              })

              headers = {
                  'content-type': '',
                  'content-length': str(len(response_body))
              }

              try:
                  request = urllib.request.Request(
                      response_url,
                      data=response_body.encode('utf-8'),
                      headers=headers,
                      method='PUT'
                  )
                  urllib.request.urlopen(request)
                  print("Response sent to CloudFormation successfully.")
              except Exception as e:
                  print(f"Failed to send response: {e}")

          # Lambda handler function
          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))

              # Define bucket name and file content
              bucket_name = os.environ.get('BUCKET_NAME', 'default-bucket-name')
              api_id = os.environ.get('API_ID', '')
              api_region = os.environ.get('API_REGION', '')
              api_stage = os.environ.get('API_STAGE', 'default')

              # Construct the API endpoint URL
              api_endpoint = f"https://{api_id}.execute-api.{api_region}.amazonaws.com/{api_stage}/ContactFormFunction"
              
              html_content = f"""
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Contact Form</title>
                  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
              </head>
              <body>
                  <div class="container">
                      <h1>Contact Form</h1>
                      <form id="contactForm" method="POST">
                          <div class="form-group">
                              <label for="name">Name:</label>
                              <input type="text" class="form-control" id="name" name="name" required>
                          </div>
                          <div class="form-group">
                              <label for="email">Email:</label>
                              <input type="email" class="form-control" id="email" name="email" required>
                          </div>
                          <div class="form-group">
                              <label for="msg">Message:</label>
                              <textarea class="form-control" id="msg" name="msg" rows="4" cols="50" required></textarea>
                          </div>
                          <input type="submit" class="btn btn-primary" value="Submit">
                      </form>
                  </div>
                  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
                  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.min.js"></script>
                  <script>
                      const ApiUrl = "{api_endpoint}";
                      document.getElementById("contactForm").addEventListener("submit", function(event) {{
                          event.preventDefault();
                          var formData = {{
                              name: document.getElementById("name").value,
                              email: document.getElementById("email").value,
                              msg: document.getElementById("msg").value
                          }};
                          fetch(ApiUrl, {{
                              method: "POST",
                              body: JSON.stringify(formData)
                          }})
                          .then(response => {{
                              if (response.ok) {{
                                  alert("Form submitted successfully");
                              }} else {{
                                  alert("Form submission failed");
                              }}
                          }})
                          .catch(error => {{
                              console.error("An error occurred:", error);
                          }});
                      }});
                  </script>
              </body>
              </html>
              """

              try:
                  # Upload the HTML content to S3 bucket
                  s3_client.put_object(
                      Bucket=bucket_name,
                      Key='index.html',
                      Body=html_content,
                      ContentType='text/html'
                  )
                  print(f"File uploaded successfully to {bucket_name}/index.html")

                  # Send a success response to CloudFormation
                  send_response(event, context, 'SUCCESS', {'Message': 'index.html uploaded successfully'})

              except Exception as e:
                  print(f"Error uploading file: {e}")
                  # Send a failure response to CloudFormation
                  send_response(event, context, 'FAILED', {'Message': str(e)})

      Environment:
        Variables:
          BUCKET_NAME: !Ref ContactS3Bucket
          API_ID: !Ref APIGatewayRest
          API_REGION: !Ref "AWS::Region"
          API_STAGE: "default"

  #Custom Resource Lambda Trigger
  UploadHtmlCustomResource:
    Type: Custom::UploadHtml
    Properties:
      ServiceToken: !GetAtt S3LambdaFunction.Arn
      BucketName: !Ref ContactS3Bucket
      ApiId: !Ref APIGatewayRest
      ApiRegion: !Ref "AWS::Region"
      ApiStage: "default"

  #Skapande av CI/CD Pipeline
  #GitHub Connection - Behöver valideras efter cloudformation körts.
  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: GitHubConnection
      ProviderType: GitHub
  #Bucket för artifacts för CodePipeline
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'artifact-bucket-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}'

  #IAM Role for CodePipeline & CloudFront
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CombinedCodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                  - s3:PutBucketAcl
                  - codestar-connections:UseConnection
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub "${ArtifactBucket.Arn}/*"
                  - !Sub "${ContactS3Bucket.Arn}/*"
                  - !Ref GitHubConnection

              #CloudFront invalidation permissions
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                  - lambda:InvokeFunction
                Resource: "*"

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'

              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: "*"

  #CloudFront Distribution & access control

  AccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "AccessControl"
        SigningBehavior: "always"
        SigningProtocol: "sigv4"
        OriginAccessControlOriginType: "s3"

  CloudFrontDist:
    Type: AWS::CloudFront::Distribution
    DependsOn: 
      - ContactS3Bucket
      - UploadHtmlCustomResource
    Properties:
      DistributionConfig:
        Origins:
          - Id: 'S3Origin'
            DomainName: !GetAtt ContactS3Bucket.DomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref AccessControl
        Enabled: true
        DefaultRootObject: 'index.html'
        DefaultCacheBehavior:
          TargetOriginId: 'S3Origin'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods:
            - 'GET'
            - 'HEAD'
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: 'none'
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  #CloudFront Lambda Function
  CloudFrontInvalidationFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - CodePipelineRole
      - CloudFrontDist
    Properties:
      FunctionName: CloudFrontInvalidationFunction
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt CodePipelineRole.Arn
      Environment:
        Variables:
          DISTRIBUTION_ID: !Ref CloudFrontDist
      Code:
        ZipFile: |
          import boto3
          import os

          cloudfront = boto3.client('cloudfront')
          codepipeline = boto3.client('codepipeline')

          def lambda_handler(event, context):
              distribution_id = os.getenv('DISTRIBUTION_ID')
              
              # Extract jobId for the CodePipeline action
              job_id = event['CodePipeline.job']['id']
              
              try:
                  # Create CloudFront invalidation
                  response = cloudfront.create_invalidation(
                      DistributionId=distribution_id,
                      InvalidationBatch={
                          'Paths': {
                              'Quantity': 1,
                              'Items': ['/*']
                          },
                          'CallerReference': str(context.aws_request_id)
                      }
                  )
                  
                  print(f"Invalidation created: {response}")
                  
                  # Notify CodePipeline of successful completion
                  codepipeline.put_job_success_result(jobId=job_id)
                  
                  return {
                      'statusCode': 200,
                      'body': {
                          'status': 'Succeeded',
                          'message': f"Invalidation created with ID: {response['Invalidation']['Id']}"
                      }
                  }
              
              except Exception as e:
                  # Notify CodePipeline of failure
                  print(f"Error: {str(e)}")
                  codepipeline.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                          'message': str(e),
                          'type': 'JobFailed'
                      }
                  )
                  
                  return {
                      'statusCode': 500,
                      'body': {
                          'status': 'Failed',
                          'message': f"Error during invalidation: {str(e)}"
                      }
                  }

  #Skapa Pipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - CodePipelineRole
      - ArtifactBucket
      - ContactS3Bucket
      - GitHubConnection
    Properties:
      Name: MyPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn

      #Artifact store (Välj S3 Bucket för artifakter)
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Ref GitHubRepository
                BranchName: main

        - Name: Deploy
          Actions:
            - Name: S3Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                BucketName: !Ref ContactS3Bucket
                Extract: 'true'
        - Name: InvalidateCache
          Actions:
            - Name: CloudFrontInvalidation
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref CloudFrontInvalidationFunction
              RoleArn: !GetAtt CodePipelineRole.Arn
              RunOrder: 1
              OutputArtifacts:
                - Name: InvalidationOutput